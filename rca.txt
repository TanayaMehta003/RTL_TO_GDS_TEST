module full_adder_8_bit (
    input clk,
    input reset,
    input [7:0] input_1A,
    input [7:0] input_2A,
    input carry_in,
    output reg [7:0] sum,
    output reg carry_out
);

    reg [7:0] input_1;
    reg [7:0] input_2;
    wire [7:0] w_sum;
    wire [7:0] w_carry;
    reg cin;

    // Instantiate full adders
    full_adder_1_bit fa1 (
        .input_1(input_1[0]),
        .input_2(input_2[0]),
        .carry_in(cin),
        .sum(w_sum[0]),
        .carry_out(w_carry[0])
    );

    full_adder_1_bit fa2 (
        .input_1(input_1[1]),
        .input_2(input_2[1]),
        .carry_in(w_carry[0]),
        .sum(w_sum[1]),
        .carry_out(w_carry[1])
    );

    full_adder_1_bit fa3 (
        .input_1(input_1[2]),
        .input_2(input_2[2]),
        .carry_in(w_carry[1]),
        .sum(w_sum[2]),
        .carry_out(w_carry[2])
    );
    

full_adder_1_bit fa4 (
    .input_1(input_1[3]),
    .input_2(input_2[3]),
    .carry_in(w_carry[2]),
    .sum(w_sum[3]),
    .carry_out(w_carry[3])
);

full_adder_1_bit fa5 (
    .input_1(input_1[4]),
    .input_2(input_2[4]),
    .carry_in(w_carry[3]),
    .sum(w_sum[4]),
    .carry_out(w_carry[4])
);

full_adder_1_bit fa6 (
    .input_1(input_1[5]),
    .input_2(input_2[5]),
    .carry_in(w_carry[4]),
    .sum(w_sum[5]),
    .carry_out(w_carry[5])
);

full_adder_1_bit fa7 (
    .input_1(input_1[6]),
    .input_2(input_2[6]),
    .carry_in(w_carry[5]),
    .sum(w_sum[6]),
    .carry_out(w_carry[6])
);

full_adder_1_bit fa8 (
    .input_1(input_1[7]),
    .input_2(input_2[7]),
    .carry_in(w_carry[6]),
    .sum(w_sum[7]),
    .carry_out(w_carry[7])
);

// Process inputs and assign outputs in always block
always @(posedge clk or posedge reset) begin
    if (reset) begin
        input_1 <= 8'b0;
        input_2 <= 8'b0;
        sum <= 8'b0;
        carry_out <= 1'b0;
    end else begin
        input_1 <= input_1A;
        input_2 <= input_2A;
        cin <= carry_in;
        sum <= w_sum;
        carry_out <= w_carry[7]; // w_carry[7] is the MSB
    end
end
endmodule

module full_adder_1_bit(
    input input_1, input_2, carry_in,
    output sum, carry_out
);
    wire w1, w2, w3; // Internal connections

    xor(w1, input_1, input_2);       // Sum output
    xor(sum, w1, carry_in);          // Sum output
    and(w2, input_1, input_2);       // Carry output
    and(w3, w1, carry_in);           // Carry output
    or(carry_out, w2, w3);           // Carry output
endmodule
